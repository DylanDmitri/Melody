

fn (int "multiple" of:int) -> bool
	mod equals 0
eg `9 multiple of 3` -> True

sum 1..999 where (multiple of 3) or (multiple of 5)

sum(i for i in range(1000) if multiple_of(i, 3) or multiple_of(i, 5))
sum(i for i in range(1000) if i%3==0 or i%5==0)




fn ("quadratic" a:int b:int c:int) -> (int, int)
	q = sqrt(b^2 - 4*a*c) / 2a
	p = b / 2a
	return (p+q, p-q)


quadratic 4 10 -2














fn (int is:"prime") -> bool
	no multiples 2..sqrt
eg `11 is prime` -> True
   `12 is prime` -> False




"askfor_choice" T (\T->bool\ check) >>
    loop 
        choice = raw_input





secret = random 1..100

            


"play_game"
    loop "guesses" 6..1
        print '{guess} tries left'

        askfor int in valid_range
        greater than secret |> print 'too high'
        less than secret    |> print 'too low'
        equal to secret     |> print 'you win', return True
    
    no guesses |> print 'you loose', return False
eg with 
    random returning [42]
    askfor returning [50, 25, 37, 42]
   -> prints '6 tries left'
      prints 





no multiples 2..sqrt


def construction(self):
					possible = [card for card in cards.values() if card.left
							and not (card.tag==Tag.Unique and card in self.city)
					]
					possible.append('None')
					choice = self.mayor.ask('Build which?', names)
					if choice != 'None':
							self.city.append(cards[choice])

player "constructs"
	card names where 
		[some left, and not "already built" (unique and in city)]
	append 'None'

	ask mayor 'Build which?'
	'None' |> return
	lookup card, append to city

	
def constructs(self):
	names = [name for name, card in cards.values()
		if card.num_left and 
		   not (already_built := card.tag==Tag.Unique and card in self.city)]
	names.append('None')

	choice = self.mayor.ask('Build which?', names)
	if choice != 'None':
		self.city.append(cards[choice])





